f=MRT_sem_F,
row.names = clock)
df <- as.data.frame(t(as.matrix(df)))
clock
#Let's calculate the average value for each condition and each specie with the *aggregate* function
bilan <- cbind(MRT_sem_F,MRT_1F)~clock
bilan
bilan
matrix(c(MRT_1F,MRT_3F,MRT_5F,MRT_10F,MRT_15F,MRT_sem_F),nrow = 6, ncol = 7)
matrix(c(MRT_1F,MRT_3F,MRT_5F,MRT_10F,MRT_15F,MRT_sem_F),nrow = 7, ncol = 6)
matrix(c(MRT_1F,MRT_3F,MRT_5F,MRT_10F,MRT_15F,MRT_sem_F),nrow = 7, ncol = 6, byrow = T)
6
matrix(c(MRT_1F,MRT_3F,MRT_5F,MRT_10F,MRT_15F,MRT_sem_F),nrow = 6, ncol = 7)
matrix(c(MRT_1F,MRT_3F,MRT_5F,MRT_10F,MRT_15F,MRT_sem_F),nrow = 6, ncol = 7)
t(matrix(c(MRT_1F,MRT_3F,MRT_5F,MRT_10F,MRT_15F,MRT_sem_F),nrow = 6, ncol = 7))
matrix(c(MRT_1F,MRT_3F,MRT_5F,MRT_10F,MRT_15F,MRT_sem_F),nrow = 6, ncol = 7, byrow = T)
#I am ready to add the error bar on the plot using my "error bar" function !
barplot(df , beside=T , legend.text=T,col=c("blue" , "skyblue") , ylim=c(0,lim) , ylab="height")
df <- matrix(c(MRT_1F,MRT_3F,MRT_5F,MRT_10F,MRT_15F,MRT_sem_F),nrow = 6, ncol = 7, byrow = T)
#I am ready to add the error bar on the plot using my "error bar" function !
barplot(df , beside=T , legend.text=T,col=c("blue" , "skyblue") , ylim=c(0,lim) , ylab="height")
#I am ready to add the error bar on the plot using my "error bar" function !
barplot(df , beside=T , legend.text=T,col=c("blue" , "skyblue")
#I am ready to add the error bar on the plot using my "error bar" function !
barplot(df , beside=T , legend.text=T,col=c("blue" , "skyblue")  )
, ylab="height"
#I am ready to add the error bar on the plot using my "error bar" function !
barplot(df , beside=T , legend.text=T,col=c("blue" , "skyblue")  , ylab="height")
#I am ready to add the error bar on the plot using my "error bar" function !
barplot(df[,c(1,6)] , beside=T , legend.text=T,col=c("blue" , "skyblue")  , ylab="height")
df
#I am ready to add the error bar on the plot using my "error bar" function !
barplot(df[c(1,6),] , beside=T , legend.text=T,col=c("blue" , "skyblue")  , ylab="height")
#I am ready to add the error bar on the plot using my "error bar" function !
barplot(df[c(1,6),] , beside=T , legend.text=T,col=c("blue" , "skyblue")  , ylab="height", log = T)
#I am ready to add the error bar on the plot using my "error bar" function !
barplot(df[c(1,6),] , beside=T , legend.text=T,col=c("blue" , "skyblue")  , ylab="height", log = T)
p<- barplot(df[c(1,6),] , beside=T , legend.text=T,col=c("blue" , "skyblue")  , ylab="height", log = T)
p<- barplot(df[c(1,6),] , beside=T , legend.text=T,col=c("blue" , "skyblue")  , ylab="height")
require(scales)
p + scale_y_continuous(trans = log2_trans(),
breaks = trans_breaks("log2", function(x) 2^x),
labels = trans_format("log2", math_format(2^.x)))
p<- barplot(df[c(1,6),] , beside=T , legend.text=T,col=c("blue" , "skyblue")  , ylab="height")
require(scales)
p + scale_y_continuous(trans = "log10")
sp + scale_y_continuous(trans='log2')
#I am ready to add the error bar on the plot using my "error bar" function !
sp<- barplot(df[c(1,6),] , beside=T , legend.text=T,col=c("blue" , "skyblue")  , ylab="height")
sp + scale_y_continuous(trans='log2')
sp + scale_y_continuous(trans='log10')
sp<- barplot(df[c(1,6),] , beside=T , legend.text=T,col=c("blue" , "skyblue")  , ylab="height")
sp + scale_y_continuous(trans='log10')
sp + scale_y_continuous(trans='log10')
sp + scale_y_continuous(trans='log10')
#I am ready to add the error bar on the plot using my "error bar" function !
sp <- barplot(df[c(1,6),] , beside=T , legend.text=T,col=c("blue" , "skyblue")  , ylab="height")
sp
sp + scale_y_continuous(trans='log10')
sp
sp <- sp + scale_y_continuous(trans='log10')
sp
library(scales)
#I am ready to add the error bar on the plot using my "error bar" function !
sp <- barplot(df[c(1,6),] , beside=T , legend.text=T,col=c("blue" , "skyblue")  , ylab="height")
sp + scale_y_continuous(trans='log10')
library(MASS) # to access Animals data sets
library(scales) # to access break formatting functions
# x and y axis are transformed and formatted
p2 <- ggplot(Animals, aes(x = body, y = brain)) + geom_point() +
scale_x_log10(breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x))) +
scale_y_log10(breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x))) +
theme_bw()
p2
# x and y axis are transformed and formatted
p2 <- barplot(Animals, aes(x = body, y = brain)) + geom_point() +
scale_x_log10(breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x))) +
scale_y_log10(breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x))) +
theme_bw()
# x and y axis are transformed and formatted
p2 <- barplot(df[c(1,6),], aes(x = body, y = brain)) + geom_point() +
scale_x_log10(breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x))) +
scale_y_log10(breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x))) +
theme_bw()
# x and y axis are transformed and formatted
p2 <- barplot(df[c(1,6),], beside = T) + geom_point() +
scale_x_log10(breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x))) +
scale_y_log10(breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x))) +
theme_bw()
ggplot(df[c(1,6),], aes(x=clarity, fill=cut)) +
geom_bar() +
coord_trans(ytrans="log10")
df <- data.frame(elements=c("A", "B", "C", "D", "E"),
c= c(5,7,12,15,10))
df
summary(df)
var(df)
df <- data.frame(elements=c("A", "B", "C", "D", "E"),
X= c(5,7,12,15,10))
df
summary(df)
var(df$c)
var(df$x)
var(df)
?var
var(df$x)
sd(df)
sd(df$X)
var(df)
var(df$X)
sd(df$X)
length(which(df$X) % 2 == 0)/nrow(df)
length(which(df$X)%2 == 0)/nrow(df)
length(which(df$X)%%2 == 0)/nrow(df)
length(which(df$X%%2 == 0))/nrow(df)
sd <-4250
erro <-300
nc<-(1-0.9)/2
n <-((qnorm(nc,lower.tail= F)*sd)/erro)^2
n
"
sd <- 4.1681
N <- 2637
erro <- 1
nc <- (1-0.95)/2
n <-(qnorm(nc, lower.tail= F)^2 * sd^2 * N)/((erro^2*(N-1))+(qnorm(nc,lower.tail = F)^2*sd^2))
n
sd <-6250
erro <-500
nc<-(1-0.95)/2
n <-((qnorm(nc,lower.tail= F)*sd)/erro)^2
n"
sd <-4250
erro <-300
nc<-(1-0.9)/2
n <-((qnorm(nc,lower.tail= F)*sd)/erro)^2
n
sd <- 5
N <- 1500
erro <- 1.5
nc <- (1-0.955)/2
n <-(qnorm(nc, lower.tail= F)^2 * sd^2 * N)/((erro^2*(N-1))+(qnorm(nc,lower.tail = F)^2*sd^2))
n
sd <- (30-10)/4
erro <- 1
nc <- (1-0.98)/2
n <-((qnorm(nc,lower.tail= F)*sd)/erro)^2
n
sd <- (30-10)/4
N <- 5000
erro <- 1
nc <- (1-0.98)/2
n <-(qnorm(nc, lower.tail= F)^2 * sd^2 * N)/((erro^2*(N-1))+(qnorm(nc,lower.tail = F)^2*sd^2))
n
pnorm(q=30,mean =  50,sd =  10)
1-pnorm(q=30,mean =  50,sd =  10)
pnorm(q=30,mean =  50,sd =  10)
qnorm(q=30,mean =  50,sd =  10)
rnorm()
rnorm(100)
pnorm(1)
pnorm(1)-pnorm(1, lower.tail = F)
1-pnorm(1)-pnorm(1)
1-pnorm(1)-pnorm(1,lower.tail = F)
pnorm(1)-1+pnorm(1)
pnorm(1)
1-pnorm(-2)
pnorm(1)
1-pnorm(-2)
1-pnorm(1)
pnorm(-2)
pnorm(0)
1-pnorm(1.28)
pnorm(mean = 90, sd = 21)
qnorm(p = 0.90,mean = 90, sd = 21)
qnorm(p = 0.90,mean = 90, sd = 21, lower.tail = F)
#Desviopadrão
d <-3.8
#Médiadaamostra
x <-30.2
#Tamanhodaamostra
n <-100
#Nível de confiança
nc<-(1-0.95)/2
#Erro
error <-d/sqrt(n)
#Limiteinferior
left <-x-(qnorm(nc,lower.tail= F)*error)
#Limitesuperior
right <-x+(qnorm(nc,lower.tail= F)*error)>cat("[",left, "-", right,"]")
#Desviopadrão
d <-3.8
#Médiadaamostra
x <-30.2
#Tamanhodaamostra
n <-100
#Nível de confiança
nc<-(1-0.95)/2
#Erro
error <-d/sqrt(n)
#Limiteinferior
left <-x-(qnorm(nc,lower.tail= F)*error)
#Limitesuperior
right <-x+(qnorm(nc,lower.tail= F)*error)
cat("[",left, "-", right,"]")
#Desviopadrão
d <-47
#Médiadaamostra
x <-658
#Tamanhodaamostra
n <-100
#Nível de confiança
nc<-(1-0.90)/2
#Erro
error <-d/sqrt(n)
#Limiteinferior
left <-x-(qnorm(nc,lower.tail= F)*error)
#Limitesuperior
right <-x+(qnorm(nc,lower.tail= F)*error)
cat("[",left, "-", right,"]")
cat("[",left, "-", right,"]", sep = "")
aux <- c(4.37, 3.63, 2.78, 5.46, 2.18, 6.07, 3.24, 5.89, 4.86, 4.64)
sd(aux)
length(aux)
aux <- c(4.37, 3.63, 2.78, 5.46, 2.18, 6.07, 3.24, 5.89, 4.86, 4.64)
#Desviopadrão
d <-sd(aux)
#Médiadaamostra
x <-mean(aux)
#Tamanhodaamostra
n <-length(aux)
#Nível de confiança
nc<-(1-0.90)/2
#Erro
error <-d/sqrt(n)
#Limiteinferior
left <-x-(qnorm(nc,lower.tail= F)*error)
#Limitesuperior
right <-x+(qnorm(nc,lower.tail= F)*error)
cat("[",left, "-", right,"]", sep = "")
cat("[",left, "-", right,"]", sep = "")
library("tm")
library("wordcloud")
library("RColorBrewer")
library("twitteR")
library("syuzhet")
library("readr")
library(stringr)
library(stringi)
library(dplyr)
library(tidyr)
setwd("~/RFiles/Projeto")
tweets <- read.csv("tweets_sus_outubro2.csv")
tweets[!is.na(tweets$latitude),]
tweets <- tweets[tweets$isRetweet == FALSE,]
tweets$textf <- tweets$text
#head(tweets$textf)
removeURL <- function(x) gsub("http[^[:space:]]*", "", x)
#tweets$textf <- readr::parse_character(tweetxt, locale = readr::locale('pt'))
tweets$textf <- sapply(tweets$textf, function(x) stri_trans_tolower(x,'pt'))
tweets$textf <- gsub("<[Uu]\\+[a-zA-Z0-9]*>", "",  tweets$textf);
tweets$textf <- gsub("(RT|via)((?:\\b\\W*@\\w+)+)", "",  tweets$textf);
tweets$textf <- str_replace(tweets$textf,"RT @[a-z,A-Z]*: ","")
tweets$textf <- gsub("@\\w+", "", tweets$textf)
tweets$textf <- removeURL(tweets$textf)
tweets$textf <- str_replace_all(tweets$textf,"@[a-zA-Z]*","")
tweets$textf <- gsub("[^[:alnum:][:blank:]!?]", "", tweets$textf)
tweets$textf <- gsub("[[:digit:]]", "", tweets$textf)
tweets_t <- paste(tweets$textf,collapse=" ")
tweets_S <- VectorSource(tweets_t)
corpus <- Corpus(tweets_S)
corpus <- tm_map(corpus, content_transformer(tolower))
corpus <- tm_map(corpus, removePunctuation)
corpus <- tm_map(corpus, stripWhitespace)
corpus <- tm_map(corpus, removeNumbers)
corpus <- tm_map(corpus, removeWords, stopwords("portuguese"))
dtm <-TermDocumentMatrix(corpus)
dtm <- as.matrix(dtm)
fre <- sort(rowSums(dtm),decreasing=TRUE)
s <- get_nrc_sentiment(tweets$textf, language = "portuguese")
tweets <- read.csv("tweetsdb.csv", encoding = "UTF-8")
tweets <- tweets[tweets$retweet == "False",]
tweets$date <- str_extract(tweets$date, "[0-9]{4}-[0-9]{2}")
tweets$textf <- textclean1(tweets$tweet)
textclean1 <- function(text_list){
aux <- text_list
removeURL <- function(x) gsub("http[^[:space:]]*", "", x)
aux <-  readr::parse_character(aux, locale = readr::locale('pt'))
aux <- sapply(aux, function(x) stri_trans_tolower(x,'pt'))
aux <- gsub("<[Uu]\\+[a-zA-Z0-9]*>", "",  aux);
aux <- gsub("(RT|via)((?:\\b\\W*@\\w+)+)", "",  aux);
aux <- str_replace(aux,"RT @[a-z,A-Z]*: ","")
aux <- gsub("@\\w+", "", aux)
aux <- removeURL(aux)
aux <- str_replace_all(aux,"@[a-zA-Z]*","")
aux <- gsub("[^[:alnum:][:blank:]!?]", "", aux)
aux <- gsub("[[:digit:]]", "", aux)
return(aux)
}
build_corpus <- function(text_listf, rwords=c()){
tweets_t <- paste(text_listf,collapse=" ")
tweets_S <- VectorSource(tweets_t)
corpus <- Corpus(tweets_S)
corpus <- tm_map(corpus, content_transformer(tolower))
corpus <- tm_map(corpus, removePunctuation)
corpus <- tm_map(corpus, stripWhitespace)
corpus <- tm_map(corpus, removeNumbers)
corpus <- tm_map(corpus, removeWords, stopwords("portuguese"))
corpus <- tm_map(corpus, removeWords, rwords)
return(corpus)
}
tweets <- read.csv("tweetsdb.csv", encoding = "UTF-8")
tweets <- tweets[tweets$retweet == "False",]
tweets$date <- str_extract(tweets$date, "[0-9]{4}-[0-9]{2}")
tweets$textf <- textclean1(tweets$tweet)
tp1 <- tweets[tweets$date = "2019-12",]
tp1 <- tweets[tweets$date == "2019-12",]
tp1 <- tweets[tweets$date == "2019-12",]
tp2 <- tweets[tweets$date == "2020-01",]
tp3 <- tweets[tweets$date == "2020-02",]
tp4 <- tweets[tweets$date == "2020-03",]
tp5 <- tweets[tweets$date == "2020-04",]
tp6 <- tweets[tweets$date == "2020-05",]
corpus <- build_corpus(tp1$textf)
dtm <-TermDocumentMatrix(corpus)
dtm <- as.matrix(dtm)
fre <- sort(rowSums(dtm),decreasing=TRUE)
s <- get_nrc_sentiment(tweets$textf, language = "portuguese")
get_sentiment <- function(text_listf){
s <- get_nrc_sentiment(tweets$textf, language = "portuguese")
barplot(colSums(s),las=2,col=rainbow(10), ylab= "Quantidade", main="Sentimentos")
return(s)
}
tp1.s <- get_sentiment(tp1$textf)
tp1.fre <- get_freq(tp1$textf)
get_freq <- function(text_listf){
corpus <- build_corpus(tp1$textf)
dtm <-TermDocumentMatrix(corpus)
dtm <- as.matrix(dtm)
fre <- sort(rowSums(dtm),decreasing=TRUE)
wordcloud(names(fre),freq=fre,min.freq=1,max.words=100,scale=c(4,.5),
random.order=F, rot.per=0.35, colors=brewer.pal(8, "Dark2"))
return(fre)
}
tp1.fre <- get_freq(tp1$textf)
tp1.fre <- get_freq(tp1$textf,  rwords=c("SUS"))
get_freq <- function(text_listf, rwords=c()){
corpus <- build_corpus(tp1$textf, rwords)
dtm <-TermDocumentMatrix(corpus)
dtm <- as.matrix(dtm)
fre <- sort(rowSums(dtm),decreasing=TRUE)
wordcloud(names(fre),freq=fre,min.freq=1,max.words=100,scale=c(4,.5),
random.order=F, rot.per=0.35, colors=brewer.pal(8, "Dark2"))
return(fre)
}
tp1.fre <- get_freq(tp1$textf,  rwords=c("SUS"))
get_freq <- function(text_listf, rwords=NULL){
corpus <- build_corpus(tp1$textf, rwords)
dtm <-TermDocumentMatrix(corpus)
dtm <- as.matrix(dtm)
fre <- sort(rowSums(dtm),decreasing=TRUE)
wordcloud(names(fre),freq=fre,min.freq=1,max.words=100,scale=c(4,.5),
random.order=F, rot.per=0.35, colors=brewer.pal(8, "Dark2"))
return(fre)
}
build_corpus <- function(text_listf, rwords=NULL){
tweets_t <- paste(text_listf,collapse=" ")
tweets_S <- VectorSource(tweets_t)
corpus <- Corpus(tweets_S)
corpus <- tm_map(corpus, content_transformer(tolower))
corpus <- tm_map(corpus, removePunctuation)
corpus <- tm_map(corpus, stripWhitespace)
corpus <- tm_map(corpus, removeNumbers)
corpus <- tm_map(corpus, removeWords, stopwords("portuguese"))
corpus <- tm_map(corpus, removeWords, rwords)
return(corpus)
}
get_freq <- function(text_listf, rwords=NULL){
corpus <- build_corpus(tp1$textf, rwords)
dtm <-TermDocumentMatrix(corpus)
dtm <- as.matrix(dtm)
fre <- sort(rowSums(dtm),decreasing=TRUE)
wordcloud(names(fre),freq=fre,min.freq=1,max.words=100,scale=c(4,.5),
random.order=F, rot.per=0.35, colors=brewer.pal(8, "Dark2"))
return(fre)
}
tp1.fre <- get_freq(tp1$textf)
tp1.fre <- get_freq(tp1$textf,  rwords=c("SUS"))
tp1.fre <- get_freq(tp1$textf,  rwords=c("sus"))
#Nuvem de palavras
wordcloud(names(fre),freq=fre,min.freq=1,max.words=INF,scale=c(4,.5),
random.order=F, rot.per=0.35, colors=brewer.pal(8, "Dark2"))
wordcloud(names(fre),freq=fre,min.freq=1,max.words=INF,scale=c(4,.5),
random.order=F, rot.per=0.35, colors=brewer.pal(8, "Dark2"))
get_freq <- function(text_listf, rwords=NULL){
corpus <- build_corpus(tp1$textf, rwords)
dtm <-TermDocumentMatrix(corpus)
dtm <- as.matrix(dtm)
fre <- sort(rowSums(dtm),decreasing=TRUE)
wordcloud(names(fre),freq=fre,min.freq=1,max.words=INF,scale=c(4,.5),
random.order=F, rot.per=0.35, colors=brewer.pal(8, "Dark2"))
return(fre)
}
tp1.fre <- get_freq(tp1$textf,  rwords=c("sus"))
get_freq <- function(text_listf, rwords=NULL){
corpus <- build_corpus(tp1$textf, rwords)
dtm <-TermDocumentMatrix(corpus)
dtm <- as.matrix(dtm)
fre <- sort(rowSums(dtm),decreasing=TRUE)
wordcloud(names(fre),freq=fre,min.freq=1,max.words=INF,scale=c(4,.5),
random.order=F, rot.per=0.35, colors=brewer.pal(8, "Dark2"))
return(fre)
}
tp1.fre <- get_freq(tp1$textf,  rwords=c("sus"))
tp1.fre <- get_freq(tp1$textf,  rwords=c("sus"), cloud_max_words = 200)
get_freq <- function(text_listf, rwords=NULL, cloud_max_words = 100){
corpus <- build_corpus(tp1$textf, rwords)
dtm <-TermDocumentMatrix(corpus)
dtm <- as.matrix(dtm)
fre <- sort(rowSums(dtm),decreasing=TRUE)
wordcloud(names(fre),freq=fre,min.freq=1,max.words=cloud_max_words,scale=c(4,.5),
random.order=F, rot.per=0.35, colors=brewer.pal(8, "Dark2"))
return(fre)
}
tp1.fre <- get_freq(tp1$textf,  rwords=c("sus"), cloud_max_words = 200)
tp1.fre <- get_freq(tp1$textf,  rwords=c("sus"), cloud_max_words = Inf)
textclean1 <- function(text_list){
aux <- text_list
removeURL <- function(x) gsub("http[^[:space:]]*", "", x)
aux <-  readr::parse_character(aux, locale = readr::locale('pt'))
aux <- sapply(aux, function(x) stri_trans_tolower(x,'pt'))
aux <- gsub("<[Uu]\\+[a-zA-Z0-9]*>", "",  aux);
aux <- gsub("(RT|via)((?:\\b\\W*@\\w+)+)", "",  aux);
aux <- str_replace(aux,"RT @[a-z,A-Z]*: ","")
aux <- gsub("@\\w+", "", aux)
aux <- removeURL(aux)
aux <- str_replace_all(aux,"@[a-zA-Z]*","")
aux <- gsub("[^[:alnum:][:blank:]!?]", "", aux)
aux <- gsub("[[:digit:]]", "", aux)
aux <- str_replace_all(aux,"[:alnum:]{1,3}","")
return(aux)
}
tweets <- read.csv("tweetsdb.csv", encoding = "UTF-8")
tweets <- tweets[tweets$retweet == "False",]
tweets$date <- str_extract(tweets$date, "[0-9]{4}-[0-9]{2}")
tweets$textf <- textclean1(tweets$tweet)
tp1 <- tweets[tweets$date == "2019-12",]
tp2 <- tweets[tweets$date == "2020-01",]
tp3 <- tweets[tweets$date == "2020-02",]
tp4 <- tweets[tweets$date == "2020-03",]
tp5 <- tweets[tweets$date == "2020-04",]
tp6 <- tweets[tweets$date == "2020-05",]
tp1.fre <- get_freq(tp1$textf,  rwords=c("sus"), cloud_max_words = Inf)
tp1.s <- get_sentiment(tp1$textf)
tp1.fre <- get_freq(tp1$textf,  rwords=c("sus"), cloud_max_words = Inf)
textclean1 <- function(text_list){
aux <- text_list
removeURL <- function(x) gsub("http[^[:space:]]*", "", x)
aux <-  readr::parse_character(aux, locale = readr::locale('pt'))
aux <- sapply(aux, function(x) stri_trans_tolower(x,'pt'))
aux <- gsub("<[Uu]\\+[a-zA-Z0-9]*>", "",  aux);
aux <- gsub("(RT|via)((?:\\b\\W*@\\w+)+)", "",  aux);
aux <- str_replace(aux,"RT @[a-z,A-Z]*: ","")
aux <- gsub("@\\w+", "", aux)
aux <- removeURL(aux)
aux <- str_replace_all(aux,"@[a-zA-Z]*","")
aux <- gsub("[^[:alnum:][:blank:]!?]", "", aux)
aux <- gsub("[[:digit:]]", "", aux)
return(aux)
}
tweets$textf <- textclean1(tweets$tweet)
tp1 <- tweets[tweets$date == "2019-12",]
tp2 <- tweets[tweets$date == "2020-01",]
tp3 <- tweets[tweets$date == "2020-02",]
tp4 <- tweets[tweets$date == "2020-03",]
tp5 <- tweets[tweets$date == "2020-04",]
tp6 <- tweets[tweets$date == "2020-05",]
tp1.fre <- get_freq(tp1$textf,  rwords=c("sus"), cloud_max_words = Inf)
tp1.fre <- get_freq(tp1$textf,  rwords=c("sus"), cloud_max_words = 300)
tp1.s <- get_sentiment(tp1$textf)
get_sentiment <- function(text_listf){
s <- get_nrc_sentiment(text_listf, language = "portuguese")
barplot(colSums(s),las=2,col=rainbow(10), ylab= "Quantidade",
main="Sentimentos")
return(s)
}
tp1.s <- get_sentiment(tp1$textf)
barplot(colSums(tp1.s),las=2,col=rainbow(10), ylab= "Quantidade",
main="Sentimentos")
View(tp1.s)
barplot(colSums(tp1.s),las=2,col=rainbow(10), ylab= "Quantidade",
main="Sentimentos")
barplot(colSums(tp1.s)~colnames(tp1.s),las=2,col=rainbow(10), ylab= "Quantidade",
main="Sentimentos")
barplot(colSums(tp1.s)~colnames(tp1.s),las=2,col=rainbow(10), ylab= "Quantidade",
main="Sentimentos")
barplot(colSums(tp1.s)~colnames(tp1.s),las=2,col=rainbow(10), ylab= "Quantidade",
main="Sentimentos")
barplot(colSums(tp1.s)~colnames(tp1.s),col=rainbow(10), ylab= "Quantidade",
main="Sentimentos")
barplot(colSums(tp1.s)~colnames(tp1.s),col=rainbow(10), ylab= "Quantidade",
main="Sentimentos")
colnames(tp1.s)
las=2
